import React, { useState } from 'react';
import type { RongbukDevice } from './types/devices';

interface RongbukDevicesProps {
  devices: RongbukDevice[];
  onConnect: (device: RongbukDevice) => void;
  onDisconnect: (device: RongbukDevice) => void;
  onRefresh: () => void;
}

// Simple refresh icon SVG component
const RefreshIcon = ({ spinning }: { spinning: boolean }) => (
  <svg
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    className={spinning ? 'refresh-spinning' : ''}
  >
    <polyline points="23 4 23 10 17 10"></polyline>
    <polyline points="1 20 1 14 7 14"></polyline>
    <path d="m20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
  </svg>
);

const RongbukDevices: React.FC<RongbukDevicesProps> = ({
  devices,
  onConnect,
  onDisconnect,
  onRefresh,
}) => {
  const [refreshing, setRefreshing] = useState(false);

  const [debouncing, setDebouncing] = useState<boolean>(false);
  const debounce = () => {
    setDebouncing(true);
    setTimeout(() => setDebouncing(false), 500);
  };

  const handleRefresh = async () => {
    setRefreshing(true);
    await onRefresh();
    setTimeout(() => setRefreshing(false), 500); // Visual feedback
  };

  const formatLocation = (location: string | string[]): string => {
    if (Array.isArray(location)) {
      return location.join(', ');
    }
    return location;
  };

  const getButtonState = (device: RongbukDevice) => {
    const isConnected = device.connectionState === 'CONNECTED';
    const isConnecting = device.connectionState === 'CONNECTING';
    const isDisconnecting = device.connectionState === 'DISCONNECTING';

    return {
      isConnected,
      isConnecting,
      isDisconnecting,
      isTransitioning: isConnecting || isDisconnecting || debouncing,
    };
  };

  return (
    <div className="rongbuk-container">
      {/* Header */}
      <div className="rongbuk-header">
        <h2 className="rongbuk-title">Rongbuk Devices</h2>
        <button
          onClick={handleRefresh}
          disabled={refreshing}
          className="rongbuk-refresh-btn"
        >
          <RefreshIcon spinning={refreshing} />
          Refresh
        </button>
      </div>

      {/* Device Table */}
      <div className="rongbuk-table-container">
        <table className="rongbuk-table">
          <thead>
            <tr>
              <th className="rongbuk-th">Device Name</th>
              <th className="rongbuk-th">Location</th>
              <th className="rongbuk-th rongbuk-th-right">Actions</th>
            </tr>
          </thead>
          <tbody>
            {devices.length === 0 ? (
              <tr>
                <td colSpan={4} className="rongbuk-empty">
                  No devices found. Click refresh to scan for devices.
                </td>
              </tr>
            ) : (
              devices.map(device => {
                const {
                  isConnected,
                  isConnecting,
                  isDisconnecting,
                  isTransitioning,
                } = getButtonState(device);

                return (
                  <tr key={device.name} className={`rongbuk-row`}>
                    <td className="rongbuk-td">
                      <div className="rongbuk-device-name">
                        <span className="rongbuk-name">{device.name}</span>
                      </div>
                    </td>
                    <td className="rongbuk-td rongbuk-location">
                      {formatLocation(device.location)}
                    </td>
                    <td className="rongbuk-td rongbuk-td-actions">
                      <div className="rongbuk-actions">
                        <button
                          onClick={() => {
                            debounce();
                            onConnect(device);
                          }}
                          disabled={isConnected || isTransitioning}
                          className="rongbuk-btn rongbuk-btn-connect"
                        >
                          Connect
                        </button>
                        <button
                          onClick={() => {
                            debounce();
                            onDisconnect(device);
                          }}
                          disabled={!isConnected || isTransitioning}
                          className="rongbuk-btn rongbuk-btn-disconnect"
                        >
                          Disconnect
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })
            )}
          </tbody>
        </table>
      </div>

      {/* Device count */}
      {devices.length > 0 && (
        <div className="rongbuk-count">
          {devices.length} device{devices.length !== 1 ? 's' : ''} found
        </div>
      )}
    </div>
  );
};

export default RongbukDevices;
