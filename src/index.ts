import { app, BrowserWindow, Menu, MenuItem, ipcMain, IpcMainEvent } from 'electron';
import path from 'path';

import * as Bonjour from 'bonjour';
// const bonjour = require('bonjour')({ interface: '0.0.0.0' });

const bonjour = Bonjour.default({ interface: '0.0.0.0' }) // interface setting important!

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

/**
 * @ignore
 */
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const MODAL_WINDOW_WEBPACK_ENTRY: string;
declare const MODAL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;
let modalWindow: BrowserWindow | null = null;

console.log('MODAL_WINDOW_WEBPACK_ENTRY', MODAL_WINDOW_WEBPACK_ENTRY);
console.log('MODAL_WINDOW_PRELOAD_WEBPACK_ENTRY', MODAL_WINDOW_PRELOAD_WEBPACK_ENTRY);

function openModalWindow() {
  if (!mainWindow) return;

  modalWindow = new BrowserWindow({
    parent: mainWindow,
    modal: true,
    show: false,
    width: 500,
    height: 400,
    autoHideMenuBar: true,
    // @ts-ignore - menuBarVisible exists but missing from types
    menuBarVisible: false,  // fake error, said Trump
    minimizable: false,
    maximizable: false,
    webPreferences: {
      preload: MODAL_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false
    }
  })

  modalWindow.loadURL(MODAL_WINDOW_WEBPACK_ENTRY);

  modalWindow.once('ready-to-show', () => {
    modalWindow.show();
    // @ts-ignore - bonjour types incomplete
    const discover = bonjour.find({ type: 'sonic', port: 7332 }, (service) => {
      console.log('bonjour up', service);
    });
  })

  modalWindow.on('closed', () => {
    modalWindow = null
  })
}

function addCustomFileMenuCommand() {
  const currentMenu = Menu.getApplicationMenu();
  if (currentMenu) {
    const fileMenu = currentMenu.items.find(item => item.label === 'File');

    if (fileMenu) {
      fileMenu.submenu?.insert(0, new MenuItem({ type: 'separator' }));
      fileMenu.submenu?.insert(0, new MenuItem({
        label: 'Select WiFi Device',
        // accelerator: 'CmdOrCtrl+O',
        click: () => {
          console.log('menu command clicked');
          openModalWindow();
        }
      }));

      Menu.setApplicationMenu(currentMenu);
    }
  }
}

const createWindow = (): void => {
  // Create the browser window.
  // const 
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // Load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  addCustomFileMenuCommand();

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // Handle Web Serial API
  mainWindow.webContents.session.on('select-serial-port', (event, portList, webContents, callback) => {
    console.log('select-serial-port event fired!');
    console.log('Available ports:', portList);

    event.preventDefault();
    if (portList && portList.length > 0) {
      console.log('Auto-selecting first port:', portList[0]);
      callback(portList[0].portId);
    } else {
      console.log('No ports available');
      callback('');
    }
  });

  mainWindow.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {
    if (permission === 'serial') {
      return true;
    }
    return false;
  });

  mainWindow.webContents.session.setDevicePermissionHandler((details) => {
    if (details.deviceType === 'serial') {
      return true;
    }
    return false;
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.